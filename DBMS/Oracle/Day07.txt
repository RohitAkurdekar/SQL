Today's Agenda:
---------------------
What Group by Having is ? What is the need for it ?
Demo
Hands on session 

--------------------------------
What Group by and Having is ? What is the need for it ?
--------------------------------

-- group by on no column
select count(*) cnt
from lms_members
having count(*) > 26;

-- group by on 1 column
select MEMBERSHIP_STATUS, count(*) cnt
from lms_members lm
group by MEMBERSHIP_STATUS
having count(*) > 12;

-- group by on more than 1 column 
select MEMBERSHIP_STATUS,city, count(*) cnt
from lms_members 
group by MEMBERSHIP_STATUS,city
having count(*) > 12;

----------------------------
-- aggregate functions introduction
----------------------------
create table test_aggregate( col1 number);
insert into test_aggregate values(1);
insert into test_aggregate values(2);
insert into test_aggregate values(3);
insert into test_aggregate values(4);

select col1 from test_aggregate;
select sum(col1) from test_aggregate;
select count(col1) from test_aggregate;
select min(col1) from test_aggregate;
select max(col1) from test_aggregate;
select avg(col1) AVG_COL from test_aggregate;

select sum(col1) ,count(col1) ,min(col1),max(col1),avg(col1) from test_aggregate;

--------------------
--Group by , having basic demo
--------------------
drop table seta;
create table seta ( col1 varchar2(100), col2 varchar2(100));
insert into seta values ('PUNE','GAURAV');
insert into seta values ('PUNE','SAGAR');
insert into seta values ('DELHI','DEVANSHU');
insert into seta values ('DELHI','PRATIK');
insert into seta values ('DELHI','DEVANDER');
insert into seta values ('JAIPUR','SHRUTI');

SELECT * FROM  SETA;
SELECT * FROM  SETA GROUP BY COL1;
SELECT col1,col2 FROM  SETA GROUP BY COL1;
SELECT col2 FROM  SETA GROUP BY COL1;
SELECT col1 FROM  SETA GROUP BY COL1;
SELECT col1,count(*) FROM  SETA GROUP BY COL1;
-- select col1,count(*) FROM  SETA where  COUNT(*) > = 2 GROUP BY COL1 ;
SELECT col1,count(*) FROM  SETA GROUP BY COL1 having COUNT(*) > = 2 ;

-------------------
Full Fledged DEMO
-------------------
/* count of no of members in each city */

select city , count(*)
from lms_members 
group by city;

/* count of members against their membership_status */
status     cnt
Temporary   12
Permanant   13

select membership_status status, count(*) cnt
from lms_members 
group by membership_status;

/* count of suppliers who stay in PUNE/MUMBAI/DELHI against their city  */
select address , count(*) cnt_of_suppliers
from lms_suppliers_details 
where address in ('PUNE','MUMBAI','DELHI')
group by address

/* number of books in each category that are placed in rack_num A1/A2/A3 */
select category , count(*) cnt_against_category
from lms_book_details
where rack_num in ('A1','A2','A3')
group by category

/* number of books issued in respective months for the month of APRIL/MAY  */
select decode(extract ( month from date_issue ),4,'APRIL',5,'MAY') Month_ , count(*) cnt_of_books
--select extract ( month from date_issue ) , count(*) cnt_of_books
from lms_book_issue
where extract ( month from date_issue ) in (4,5)
group by extract ( month from date_issue ) ;


/* count of members against their status and city */

status city count
temp   Pune  90
perm   Pune  90

select membership_status ,city, count(*)
from lms_members 
group by membership_status , city ;

/* count of suppliers against their respective category of email accounts 
who have gmail.com and yahoo.com accounts eg: gmail/yahoo
category    cnt_of_suppliers 
gmail.com     6
yahoo.com     2
*/

select substr(email,-9) category, count(*) cnt_against_category
from lms_suppliers_details sd
where email like '%gmail.com' or email like '%yahoo.com'
group by substr(email,-9);

/* string functions */
select substr('sing@gmail.com',5) from dual;
select instr('sing@gmail.com','i',1,2) from dual;

select upper('sing@gmail.com') from dual;
select lower('sing@gmail.com') from dual;
select initcap('sing@gmail.com') from dual;

select trim('   sing@gmail.com    ') from dual;
select rtrim('   sing@gmail.com    ') from dual;
select ltrim('   sing@gmail.com    ') from dual;

select substr('sing@gmail.com',-9) from dual;
select substr('sing@yahoo.com',-9) from dual;


/* count of suppliers against their respective category of email accounts categories should be  gmail/ yahoo/ others 

category cnt 
gmail     6
yahoo     2
others    6 
*/

select  case 
            when email like '%gmail.com' then 'gmail' 
            when email like '%yahoo.com' then 'yahoo'
        else
            'others'
        end category, count(*) cnt_against_category
from lms_suppliers_details sd
group by 
case 
	when email like '%gmail.com' then 'gmail' 
	when email like '%yahoo.com' then 'yahoo'
else
	'others'
end 

---------------------------------
EXERCISES on Group by,Having 
--------------------------------

/* category of book ,
    total number of books under that category 
    such that the category has more than 2 books 
*/

/* book code and name of the book which has been issued atleast twice */ 

/* book code and name of the book which has been issued atleast twice to a member*/

/* book codes and their issued counts */

/* book_code and name of the book which has been issued more than 4 times 
   and has more than 0 suppliers 
   (Note: Java how to program has 2 book codes because of different published date) 
*/

/* name of the book which has been issued more than 4 times and has more than 0 suppliers */


total number of books placed on given rack number 
such that edition of the book is atleast 3 
and it is supplied by a supplier who has a rediff / gmail account  
and the book is issued to the students who are permanent in status 
/* sample O/P
RACK_NUM	Total
A1			2
A3			1
*/

 total of number of all the books that have been issued to a member who stays in Delhi / Mumbai / Pune 
 and book that was issued has arrived later than 1st July 2000
 and supplied by a supplier who belongs to  Delhi / Mumbai / Pune / Chennai
/* 
 -- Sample o/p
 member_name  city  total 
 Amruta       Pune   1 
*/ 



--------------------
--------------------
---------------------------
--- order by demo 
--------------------------

Some Good websites for SQL practice
--------------------

https://datalemur.com/questions
https://sqlzoo.net/wiki/Window_LAG
http://sqlfiddle.com/#!9/a6c585/1

------------------------

Today's Agenda:
-----------------
what Order by is ? What is the need for it ?
Demo 
Hand on session 

----------------
select 
from 
where
group by 
having
order by -- data that is projected is ordered using this clause

------------------------------------------------
Consider a table with single column for order by 
------------------------------------------------
table1
col1
1
2
3
4
null

select col1 from table1 ;
col1     col1     col1
1        2        null
2        1        4
3        3        3
4        4        2
null              1

order by <expression> asc/desc nulls first/nulls last
ex : order by col1 asc nulls last  
	 order by col1 desc nulls first 
	 order by col1 [asc nulls last] // default 
	 order by col1 desc [nulls first] // default 


------------------------
Sql creates for above example 
------------------------
create table table1
(
col1 number
);

insert into table1(col1) values (1);
insert into table1(col1) values (null);
insert into table1(col1) values (3);
insert into table1(col1) values (2);
insert into table1(col1) values (4);


select * from table1;
-- default (asc nulls last)
select * from table1 order by col1;
select * from table1 order by col1 asc ;
select * from table1 order by col1 asc nulls last;

-- default with desc is nulls first 
select * from table1 order by col1 desc;
select * from table1 order by col1 desc nulls first;
select * from table1 order by col1 desc nulls last;


----------------------------------------------------------------------------------
Consider a table with two column for order by [ Sql creates]
----------------------------------------------------
drop table table1;
create table table1
(
col1 number,
col2 number
);

insert into table1(col1,col2) values (1,10);
insert into table1(col1,col2) values (1,20);
insert into table1(col1,col2) values (1,30);
insert into table1(col1,col2) values (null,10);
insert into table1(col1,col2) values (null,30);
insert into table1(col1,col2) values (null,20);
insert into table1(col1,col2) values (3,30);
insert into table1(col1,col2) values (3,20);
insert into table1(col1,col2) values (3,10);


select * from table1;
-- default (asc nulls last)
select * from table1 order by col1;
select * from table1 order by col1 asc ;
select * from table1 order by col1 asc nulls last;

-- default with desc is nulls first 
select * from table1 order by col1 desc;
select * from table1 order by col1 desc nulls first;
select * from table1 order by col1 desc nulls last;

-- default (asc nulls last)
select * from table1 order by col1,col2;
select * from table1 order by col1 asc,col2 asc ;
select * from table1 order by col1 asc nulls last , col2 nulls last;

select col2,col1 from table1 order by col2,col1;
select col2,col1 from table1 order by col2 asc,col1 asc ;
select col2,col1 from table1 order by col2 asc nulls last , col1 nulls last;


-- default with desc is nulls first 
select * from table1 order by col1 desc,col2 desc;
select * from table1 order by col1 desc nulls first,col2 desc nulls first;

-- any permutation is possible 
select * from table1 order by col1 desc nulls last ,col2 asc;

-------------------------------------

/* Question : does ordering effect metadata? */
drop table second_table;
drop table first_table;

create table first_table ( a number);
create table second_table ( a number);

insert into first_table(a) values (1);
insert into first_table(a) values (2);
insert into first_table(a) values (3);

insert into second_table(a) values (45);
insert into second_table(a) values (23);
insert into second_table(a) values (123);

select * from first_table order by a desc;
select * from second_table order by a desc;

select * from user_tables where lower(table_name) in ('first_table','second_table');	 


/* name of the members ordered on their names ascending */
select * from lms_members order by member_name;
select * from lms_members order by membership_status asc , member_name desc;

select * from lms_book_details order by supplier_id desc nulls last;

/* list the book_name and issuance_date , date_of_expected_return 
Such that the books that are to be returned at the earliest are seen at the top */
select book_title,date_issue,date_return
from lms_book_details bd inner join  lms_book_issue iss on (bd.book_code = iss.book_code)
order by date_return asc nulls last;

/*  list all the members such that the oldest member (the very first member to my LMS) 
    of my LMS appears at the top
*/ 
select * 
from lms_members 
order by date_register asc nulls last ;

/*  list all the members such that the longest duration of membership member(as of today)
    appears at the top and the member is active right now  */ 
    
select * 
from lms_members 
where sysdate < date_expire
order by date_register asc nulls last ;


/* provide the supplier name , their city , no_of_books supplied
  based on the person who has supplied  most books comes at the top
  note : we would have suppliers who have not supplied any books at the bottom of the output
  and the count would be 0*/ 

select sd.supplier_id,supplier_name , address , count( bd.supplier_id) cnt
from lms_suppliers_details sd  left join  lms_book_details bd on (sd.supplier_id= bd.supplier_id)
group by sd.supplier_id,supplier_name,address
order by count( bd.supplier_id)  desc;


/* provide the book codes and book names based on the least issued book comes at the top 
  note : we would have books who have not been issued at the top of the output */

select bd.book_code,bd.book_title, count(iss.book_code) from
lms_book_Details bd left join lms_book_issue iss on (bd.book_code = iss.book_code)
group by bd.book_code,bd.book_title
order by count(iss.book_code) asc nulls last ;


/* provide the name of the member,total_fine based on the most fined member comes at the top
  note : we would have members who have not been issued books at the bottom of the output */

select mem.member_name, decode(sum(fd.fine_amount),NULL,0,sum(fd.fine_amount)) total_fine from
lms_members mem LEFT JOIN lms_book_issue iss on (mem.member_id = iss.member_id)
left join  lms_fine_details fd  on ( iss.fine_range = fd.fine_range )
group by mem.member_name
order by sum(fd.fine_amount) desc nulls last ;






